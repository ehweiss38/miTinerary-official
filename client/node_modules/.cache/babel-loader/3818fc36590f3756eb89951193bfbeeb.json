{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/Code/myTinerary/client/src/components/Algo/AlgoHome.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport AlgoSearchHome from \"./Search/AlgoSearchHome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AlgoHome extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      mid: null,\n      data: null,\n      bad: null,\n      outline: null,\n      stops: 0,\n      mode: 'eq',\n      missing: false\n    };\n    this.setValues = async (stops, valPairs, states) => {\n      console.log('submitted');\n      console.log(valPairs);\n      const req = await axios.get(`http://localhost:7000/${valPairs}/${states}/confirm`);\n      console.log(req);\n      if (typeof req.data === \"string\" || typeof req.data[0] === \"string\") {\n        console.log(\"bad\", req);\n        this.setState({\n          bad: req.data[0] ? req.data[0] : req.data\n        });\n        return;\n      } else {\n        const data = req.data;\n        console.log(typeof data);\n        //need error handling here\n        //some redundancy with start/stop & data, but trouble otherwise\n        this.setState({\n          stops: parseInt(stops),\n          data: data[0],\n          distance: data[1],\n          bad: null,\n          outline: null\n        });\n      }\n    };\n    this.setMode = mode => {\n      this.setState({\n        mode: mode\n      });\n    };\n    this.launchAlgo = async () => {\n      const trip = await axios.get(`http://localhost:7000/${this.state.mode}/algoPlan`);\n      this.props.receiveTrip();\n    };\n    this.extraStops = async arr => {\n      console.log('extrastops called', arr);\n      //note: doimg this would eliminate need to check distances for all, hugely reducing runtime but much more likely to cause rejection\n      //adjust validity accordingly\n      let qs = \"\";\n      for (let m of arr) {\n        qs += '_' + m.index;\n      }\n      console.log(qs);\n      if (!qs) {\n        qs += \"_\";\n      }\n      //want to set this to app component\n      //is ordered even needed?Maybe as back up\n      const ordered = await axios.get(`http://localhost:7000/${qs}/order`);\n      //have to plan first implement as function rather than req \n      console.log(\"ordered\", ordered);\n      const trip = await axios.get(`http://localhost:7000/plan`);\n      //here is the issue: ordered returns the full list\n\n      //have to set up DLL here instead of in other doc\n\n      //const outline=await axios.get()\n      this.setState({\n        mid: arr,\n        outline: trip\n      });\n\n      //!!!!: The qs wont be the cities themselves, but rather relative order based on order added\n      //Also keeps track of any that were removed\n\n      //checks distance from starting city to each added city\n      //orders based on distance\n      //checks validity assuming rest of stops are valid\n      //if stop is invalid, removes, recalculates validity based on new number of stops\n      //once list is calculated, compares total stops to stops used, assigns midpoints accordingly\n    };\n    this.clearState = () => {\n      this.setState({\n        mid: null,\n        data: null,\n        distance: null,\n        bad: null\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(AlgoSearchHome, {\n        launch: this.launchAlgo,\n        mode: this.state.mode,\n        setMode: this.setMode,\n        outline: this.state.outline,\n        data: this.state.data,\n        distance: this.state.distance,\n        setValues: this.setValues,\n        clearState: this.clearState,\n        extraStops: this.extraStops,\n        bad: this.state.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AlgoHome;","map":{"version":3,"names":["React","axios","AlgoSearchHome","AlgoHome","Component","state","mid","data","bad","outline","stops","mode","missing","setValues","valPairs","states","console","log","req","get","setState","parseInt","distance","setMode","launchAlgo","trip","props","receiveTrip","extraStops","arr","qs","m","index","ordered","clearState","render"],"sources":["/Users/ethan/Desktop/Code/myTinerary/client/src/components/Algo/AlgoHome.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\"\nimport AlgoSearchHome from \"./Search/AlgoSearchHome\";\n\nclass AlgoHome extends React.Component{\n    //what does the stops state do? Backup I guess\n    state={mid:null,data:null,bad:null,outline:null,stops:0,mode:'eq',missing:false}\n    setValues=async(stops,valPairs,states)=>{\n        console.log('submitted')\n        console.log(valPairs)\n        const req=await axios.get(`http://localhost:7000/${valPairs}/${states}/confirm`)\n        console.log(req)\n        if(typeof req.data===\"string\"||typeof req.data[0]===\"string\"){\n            console.log(\"bad\",req)\n            this.setState({bad:req.data[0]?req.data[0]:req.data})\n            return\n        }else{\n            const data=req.data\n            console.log(typeof data)\n            //need error handling here\n            //some redundancy with start/stop & data, but trouble otherwise\n            this.setState({stops:parseInt(stops),data:data[0],distance:data[1],bad:null, outline:null})\n        }\n    }\n\n    setMode=(mode)=>{\n        this.setState({mode:mode})\n    }\n    launchAlgo=async()=>{\n        const trip=await axios.get(`http://localhost:7000/${this.state.mode}/algoPlan`)\n        this.props.receiveTrip()\n    }\n\n    extraStops=async(arr)=>{\n        console.log('extrastops called', arr)\n        //note: doimg this would eliminate need to check distances for all, hugely reducing runtime but much more likely to cause rejection\n        //adjust validity accordingly\n        let qs=\"\"\n        for(let m of arr){\n            qs+=('_'+m.index)\n        }\n        console.log(qs)\n        if(!qs){\n            qs+=\"_\"\n        }\n        //want to set this to app component\n        //is ordered even needed?Maybe as back up\n        const ordered=await axios.get(`http://localhost:7000/${qs}/order`)\n        //have to plan first implement as function rather than req \n        console.log(\"ordered\",ordered)\n        const trip=await axios.get(`http://localhost:7000/plan`)\n        //here is the issue: ordered returns the full list\n\n        //have to set up DLL here instead of in other doc\n\n        //const outline=await axios.get()\n        this.setState({mid:arr,outline:trip})\n\n        //!!!!: The qs wont be the cities themselves, but rather relative order based on order added\n        //Also keeps track of any that were removed\n\n\n        //checks distance from starting city to each added city\n        //orders based on distance\n        //checks validity assuming rest of stops are valid\n        //if stop is invalid, removes, recalculates validity based on new number of stops\n        //once list is calculated, compares total stops to stops used, assigns midpoints accordingly\n    }\n\n    clearState=()=>{\n        this.setState({mid:null,data:null,distance:null,bad:null})\n    }\n    render(){\n        return(\n            <div>\n                <AlgoSearchHome launch={this.launchAlgo} mode={this.state.mode} setMode={this.setMode} outline={this.state.outline} data={this.state.data} distance={this.state.distance} setValues={this.setValues} clearState={this.clearState} extraStops={this.extraStops} bad={this.state.bad}/>\n            </div>\n        )\n    }\n}\nexport default AlgoHome"],"mappings":"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"},"metadata":{},"sourceType":"module"}