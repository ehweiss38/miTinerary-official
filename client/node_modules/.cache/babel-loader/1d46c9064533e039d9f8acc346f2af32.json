{"ast":null,"code":"//note: Sourced from geeksforgeeks \nmodule.exports = (la1, la2, lo1, lo2) => {\n  const distRef = {\n    19: 1128.497220,\n    18: 2256.994440,\n    17: 4513.988880,\n    16: 9027.977761,\n    15: 18055.955520,\n    14: 36111.911040,\n    13: 72223.822090,\n    12: 144447.644200,\n    11: 288895.288400,\n    10: 577790.576700,\n    9: 1155581.153000,\n    8: 2311162.307000,\n    7: 4622324.614000,\n    6: 9244649.227000,\n    5: 18489298.450000,\n    4: 36978596.910000,\n    3: 73957193.820000,\n    2: 147914387.600000,\n    1: 295828775.300000,\n    0: 591657550.500000\n  };\n  function distance(lat1, lat2, lon1, lon2) {\n    // The math module contains a function\n    // named toRadians which converts from\n    // degrees to radians.\n    lon1 = lon1 * Math.PI / 180;\n    lon2 = lon2 * Math.PI / 180;\n    lat1 = lat1 * Math.PI / 180;\n    lat2 = lat2 * Math.PI / 180;\n\n    // Haversine formula\n    let dlon = lon2 - lon1;\n    let dlat = lat2 - lat1;\n    let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\n    let c = 2 * Math.asin(Math.sqrt(a));\n\n    // Radius of earth in kilometers. Use 3956\n    // for miles\n    let r = 6371;\n\n    // calculate the result\n    return c * r;\n  }\n  const meters = distance(la1, la2, lo1, lo2) * 1000;\n  let use = null;\n  for (let key in distRef) {\n    if (use) {\n      break;\n    }\n    if (meters < distRef[key]) {\n      use = key;\n    }\n  }\n  console.log(meters, use);\n  return use;\n};","map":{"version":3,"names":["module","exports","la1","la2","lo1","lo2","distRef","distance","lat1","lat2","lon1","lon2","Math","PI","dlon","dlat","a","pow","sin","cos","c","asin","sqrt","r","meters","use","key","console","log"],"sources":["/Users/ethan/Desktop/Code/myTinerary/mitinerary/client/src/components/display/components/calcDistance/calcDistance.js"],"sourcesContent":["//note: Sourced from geeksforgeeks \nmodule.exports=(la1,la2,lo1,lo2)=>{\n\n    const distRef={\n        19 : 1128.497220,\n        18 : 2256.994440,\n        17 : 4513.988880,\n        16 : 9027.977761,\n        15 : 18055.955520,\n        14 : 36111.911040,\n        13 : 72223.822090,\n        12 : 144447.644200,\n        11 : 288895.288400,\n        10 : 577790.576700,\n        9 : 1155581.153000,\n        8  : 2311162.307000,\n        7  : 4622324.614000,\n        6  : 9244649.227000,\n        5  : 18489298.450000,\n        4  : 36978596.910000,\n        3  : 73957193.820000,\n        2  : 147914387.600000,\n        1  : 295828775.300000,\n        0  : 591657550.500000\n    }\n    function distance(lat1,\n        lat2, lon1, lon2){\n        // The math module contains a function\n        // named toRadians which converts from\n        // degrees to radians.\n        lon1 =  lon1 * Math.PI / 180;\n        lon2 = lon2 * Math.PI / 180;\n        lat1 = lat1 * Math.PI / 180;\n        lat2 = lat2 * Math.PI / 180;\n        \n        // Haversine formula\n        let dlon = lon2 - lon1;\n        let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2)\n        + Math.cos(lat1) * Math.cos(lat2)\n        * Math.pow(Math.sin(dlon / 2),2);\n        \n        let c = 2 * Math.asin(Math.sqrt(a));\n        \n        // Radius of earth in kilometers. Use 3956\n        // for miles\n        let r = 6371;\n        \n        // calculate the result\n        return(c * r);\n    }\n    const meters=distance(la1,la2,lo1,lo2)*1000\n\n    let use=null\n\n    for(let key in distRef){\n        if(use){\n            break\n        }\n        if(meters<distRef[key]){\n            use=key\n        }\n    }\n    console.log(meters,use)\n\n    return use\n\n}"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAO,GAAC,CAACC,GAAG,EAACC,GAAG,EAACC,GAAG,EAACC,GAAG,KAAG;EAE9B,MAAMC,OAAO,GAAC;IACV,EAAE,EAAG,WAAW;IAChB,EAAE,EAAG,WAAW;IAChB,EAAE,EAAG,WAAW;IAChB,EAAE,EAAG,WAAW;IAChB,EAAE,EAAG,YAAY;IACjB,EAAE,EAAG,YAAY;IACjB,EAAE,EAAG,YAAY;IACjB,EAAE,EAAG,aAAa;IAClB,EAAE,EAAG,aAAa;IAClB,EAAE,EAAG,aAAa;IAClB,CAAC,EAAG,cAAc;IAClB,CAAC,EAAI,cAAc;IACnB,CAAC,EAAI,cAAc;IACnB,CAAC,EAAI,cAAc;IACnB,CAAC,EAAI,eAAe;IACpB,CAAC,EAAI,eAAe;IACpB,CAAC,EAAI,eAAe;IACpB,CAAC,EAAI,gBAAgB;IACrB,CAAC,EAAI,gBAAgB;IACrB,CAAC,EAAI;EACT,CAAC;EACD,SAASC,QAAQ,CAACC,IAAI,EAClBC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAC;IACjB;IACA;IACA;IACAD,IAAI,GAAIA,IAAI,GAAGE,IAAI,CAACC,EAAE,GAAG,GAAG;IAC5BF,IAAI,GAAGA,IAAI,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;IAC3BL,IAAI,GAAGA,IAAI,GAAGI,IAAI,CAACC,EAAE,GAAG,GAAG;IAC3BJ,IAAI,GAAGA,IAAI,GAAGG,IAAI,CAACC,EAAE,GAAG,GAAG;;IAE3B;IACA,IAAIC,IAAI,GAAGH,IAAI,GAAGD,IAAI;IACtB,IAAIK,IAAI,GAAGN,IAAI,GAAGD,IAAI;IACtB,IAAIQ,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GACrCH,IAAI,CAACO,GAAG,CAACX,IAAI,CAAC,GAAGI,IAAI,CAACO,GAAG,CAACV,IAAI,CAAC,GAC/BG,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACJ,IAAI,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;IAEhC,IAAIM,CAAC,GAAG,CAAC,GAAGR,IAAI,CAACS,IAAI,CAACT,IAAI,CAACU,IAAI,CAACN,CAAC,CAAC,CAAC;;IAEnC;IACA;IACA,IAAIO,CAAC,GAAG,IAAI;;IAEZ;IACA,OAAOH,CAAC,GAAGG,CAAC;EAChB;EACA,MAAMC,MAAM,GAACjB,QAAQ,CAACL,GAAG,EAACC,GAAG,EAACC,GAAG,EAACC,GAAG,CAAC,GAAC,IAAI;EAE3C,IAAIoB,GAAG,GAAC,IAAI;EAEZ,KAAI,IAAIC,GAAG,IAAIpB,OAAO,EAAC;IACnB,IAAGmB,GAAG,EAAC;MACH;IACJ;IACA,IAAGD,MAAM,GAAClB,OAAO,CAACoB,GAAG,CAAC,EAAC;MACnBD,GAAG,GAACC,GAAG;IACX;EACJ;EACAC,OAAO,CAACC,GAAG,CAACJ,MAAM,EAACC,GAAG,CAAC;EAEvB,OAAOA,GAAG;AAEd,CAAC"},"metadata":{},"sourceType":"module"}