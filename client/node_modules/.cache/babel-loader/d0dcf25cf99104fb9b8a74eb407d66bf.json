{"ast":null,"code":"//note: Sourced from geeksforgeeks \nmodule.exports = (la1, la2, lo1, lo2) => {\n  const distRef = [1128.497220, 2256.994440, 4513.988880, 9027.977761, 18055.955520, 36111.911040, 72223.822090, 144447.644200, 288895.288400, 577790.576700, 1155581.153000, 2311162.307000, 4622324.614000, 9244649.227000, 18489298.450000, 36978596.910000, 73957193.820000, 147914387.600000, 295828775.300000, 591657550.500000];\n  function distance(lat1, lat2, lon1, lon2) {\n    // The math module contains a function\n    // named toRadians which converts from\n    // degrees to radians.\n    lon1 = lon1 * Math.PI / 180;\n    lon2 = lon2 * Math.PI / 180;\n    lat1 = lat1 * Math.PI / 180;\n    lat2 = lat2 * Math.PI / 180;\n\n    // Haversine formula\n    let dlon = lon2 - lon1;\n    let dlat = lat2 - lat1;\n    let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\n    let c = 2 * Math.asin(Math.sqrt(a));\n\n    // Radius of earth in kilometers. Use 3956\n    // for miles\n    let r = 6371;\n\n    // calculate the result\n    return c * r;\n  }\n  const meters = distance(la1, la2, lo1, lo2) * 1000;\n  let use = null;\n  for (let i = 0; i < distRef.length; i++) {\n    console.log(use, distRef[key]);\n    if (use) {\n      break;\n    }\n    if (meters < distRef[i]) {\n      use = key;\n    }\n  }\n  console.log(meters, use);\n  return use;\n};","map":{"version":3,"names":["module","exports","la1","la2","lo1","lo2","distRef","distance","lat1","lat2","lon1","lon2","Math","PI","dlon","dlat","a","pow","sin","cos","c","asin","sqrt","r","meters","use","i","length","console","log","key"],"sources":["/Users/ethan/Desktop/Code/myTinerary/mitinerary/client/src/components/display/components/calcDistance/calcDistance.js"],"sourcesContent":["//note: Sourced from geeksforgeeks \nmodule.exports=(la1,la2,lo1,lo2)=>{\n\n    const distRef=[1128.497220,2256.994440,4513.988880,9027.977761,18055.955520,36111.911040,\n        72223.822090,144447.644200,288895.288400,577790.576700,1155581.153000,2311162.307000,\n        4622324.614000,9244649.227000,18489298.450000,36978596.910000,73957193.820000,147914387.600000,\n        295828775.300000,591657550.500000]\n        \n    function distance(lat1,\n        lat2, lon1, lon2){\n        // The math module contains a function\n        // named toRadians which converts from\n        // degrees to radians.\n        lon1 =  lon1 * Math.PI / 180;\n        lon2 = lon2 * Math.PI / 180;\n        lat1 = lat1 * Math.PI / 180;\n        lat2 = lat2 * Math.PI / 180;\n        \n        // Haversine formula\n        let dlon = lon2 - lon1;\n        let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2)\n        + Math.cos(lat1) * Math.cos(lat2)\n        * Math.pow(Math.sin(dlon / 2),2);\n        \n        let c = 2 * Math.asin(Math.sqrt(a));\n        \n        // Radius of earth in kilometers. Use 3956\n        // for miles\n        let r = 6371;\n        \n        // calculate the result\n        return(c * r);\n    }\n    const meters=distance(la1,la2,lo1,lo2)*1000\n\n    let use=null\n\n    for(let i=0;i<distRef.length;i++){\n        console.log(use,distRef[key])\n        if(use){\n            break\n        }\n        if(meters<distRef[i]){\n            use=key\n        }\n    }\n    console.log(meters,use)\n\n    return use\n\n}"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAO,GAAC,CAACC,GAAG,EAACC,GAAG,EAACC,GAAG,EAACC,GAAG,KAAG;EAE9B,MAAMC,OAAO,GAAC,CAAC,WAAW,EAAC,WAAW,EAAC,WAAW,EAAC,WAAW,EAAC,YAAY,EAAC,YAAY,EACpF,YAAY,EAAC,aAAa,EAAC,aAAa,EAAC,aAAa,EAAC,cAAc,EAAC,cAAc,EACpF,cAAc,EAAC,cAAc,EAAC,eAAe,EAAC,eAAe,EAAC,eAAe,EAAC,gBAAgB,EAC9F,gBAAgB,EAAC,gBAAgB,CAAC;EAEtC,SAASC,QAAQ,CAACC,IAAI,EAClBC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAC;IACjB;IACA;IACA;IACAD,IAAI,GAAIA,IAAI,GAAGE,IAAI,CAACC,EAAE,GAAG,GAAG;IAC5BF,IAAI,GAAGA,IAAI,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;IAC3BL,IAAI,GAAGA,IAAI,GAAGI,IAAI,CAACC,EAAE,GAAG,GAAG;IAC3BJ,IAAI,GAAGA,IAAI,GAAGG,IAAI,CAACC,EAAE,GAAG,GAAG;;IAE3B;IACA,IAAIC,IAAI,GAAGH,IAAI,GAAGD,IAAI;IACtB,IAAIK,IAAI,GAAGN,IAAI,GAAGD,IAAI;IACtB,IAAIQ,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GACrCH,IAAI,CAACO,GAAG,CAACX,IAAI,CAAC,GAAGI,IAAI,CAACO,GAAG,CAACV,IAAI,CAAC,GAC/BG,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACJ,IAAI,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC;IAEhC,IAAIM,CAAC,GAAG,CAAC,GAAGR,IAAI,CAACS,IAAI,CAACT,IAAI,CAACU,IAAI,CAACN,CAAC,CAAC,CAAC;;IAEnC;IACA;IACA,IAAIO,CAAC,GAAG,IAAI;;IAEZ;IACA,OAAOH,CAAC,GAAGG,CAAC;EAChB;EACA,MAAMC,MAAM,GAACjB,QAAQ,CAACL,GAAG,EAACC,GAAG,EAACC,GAAG,EAACC,GAAG,CAAC,GAAC,IAAI;EAE3C,IAAIoB,GAAG,GAAC,IAAI;EAEZ,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACpB,OAAO,CAACqB,MAAM,EAACD,CAAC,EAAE,EAAC;IAC7BE,OAAO,CAACC,GAAG,CAACJ,GAAG,EAACnB,OAAO,CAACwB,GAAG,CAAC,CAAC;IAC7B,IAAGL,GAAG,EAAC;MACH;IACJ;IACA,IAAGD,MAAM,GAAClB,OAAO,CAACoB,CAAC,CAAC,EAAC;MACjBD,GAAG,GAACK,GAAG;IACX;EACJ;EACAF,OAAO,CAACC,GAAG,CAACL,MAAM,EAACC,GAAG,CAAC;EAEvB,OAAOA,GAAG;AAEd,CAAC"},"metadata":{},"sourceType":"module"}