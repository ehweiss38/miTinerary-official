{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Desktop/Code/miTinerary-official/client/src/components/Algo/AlgoHome.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport AlgoSearchHome from \"./Search/AlgoSearchHome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\n\n//This is main component for algorithm related components, controlling user input components so as to collect necessaary info\n\nclass AlgoHome extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      mid: null,\n      data: null,\n      bad: null,\n      outline: null,\n      stops: 0,\n      mode: 'eq',\n      missing: false\n    };\n    this.setValues = async (stops, valPairs) => {\n      console.log('submitted');\n      console.log(valPairs);\n      const req = await axios.get(`https://mitinerary-js.herokuapp.com/home/${valPairs}/confirm`, {\n        withCredentials: true\n      });\n      console.log(req);\n      //If it runs correctly, it sends back an array of objects. If error, it sends back city that produced error as string\n      if (typeof req.data === \"string\" || typeof req.data[0] === \"string\") {\n        console.log(\"bad\", req);\n        //uses location of error to determine which city produced error\n        this.setState({\n          bad: req.data[0] ? req.data[0] : req.data\n        });\n        return;\n      } else {\n        const data = req.data;\n        console.log(typeof data);\n        //need error handling here\n        //some redundancy with start/stop & data, but trouble otherwise\n        this.setState({\n          stops: parseInt(stops),\n          data: data[0],\n          distance: data[1],\n          bad: null,\n          outline: null\n        });\n      }\n    };\n    this.setMode = mode => {\n      this.setState({\n        mode: mode\n      });\n    };\n    this.launchAlgo = async () => {\n      const trip = await axios.get(`https://mitinerary-js.herokuapp.com/home/${this.state.mode}/algoPlan`, {\n        withCredentials: true\n      });\n      console.log(\"this heres the trip\", trip.data[0]);\n      this.props.receiveTrip(trip.data);\n      return;\n    };\n    this.extraStops = async arr => {\n      console.log('extrastops called', arr);\n      let qs = \"\";\n      for (let m of arr) {\n        qs += '_' + m.index;\n      }\n      console.log(qs);\n      if (!qs) {\n        qs += \"_\";\n      }\n      //Rearranges stops in the event user changed their order. Informs backend of order on front end\n      const ordered = await axios.get(`https://mitinerary-js.herokuapp.com/home/${qs}/order`, {\n        withCredentials: true\n      });\n      //have to plan first implement as function rather than req \n      console.log(\"ordered\", ordered);\n      //Tells back end to create a doubly linked list, each node containing info on how far until next pre-determined stop, and how many stops it will make before then\n      const trip = await axios.get(`https://mitinerary-js.herokuapp.com/home/plan`, {\n        withCredentials: true\n      });\n\n      /*BASIC OUTLINE OF PLAN:\n          checks distance from starting city to each added city\n          orders based on distance\n          once list is calculated, compares total stops to stops used, assigns midpoints accordingly*/\n\n      //Resets the mid arr to reflect updated order, outline serves as sketch of stops so far\n      this.setState({\n        mid: arr,\n        outline: trip\n      });\n\n      //!!!!: The qs wont be the cities themselves, but rather relative order based on order added\n      //Also keeps track of any that were removed\n    };\n    this.clearState = () => {\n      this.setState({\n        mid: null,\n        data: null,\n        distance: null,\n        bad: null\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(AlgoSearchHome, {\n        launch: this.launchAlgo,\n        mode: this.state.mode,\n        setMode: this.setMode,\n        outline: this.state.outline,\n        data: this.state.data,\n        distance: this.state.distance,\n        setValues: this.setValues,\n        clearState: this.clearState,\n        extraStops: this.extraStops,\n        bad: this.state.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AlgoHome;","map":{"version":3,"names":["React","axios","AlgoSearchHome","defaults","withCredentials","AlgoHome","Component","state","mid","data","bad","outline","stops","mode","missing","setValues","valPairs","console","log","req","get","setState","parseInt","distance","setMode","launchAlgo","trip","props","receiveTrip","extraStops","arr","qs","m","index","ordered","clearState","render"],"sources":["/Users/ethan/Desktop/Code/miTinerary-official/client/src/components/Algo/AlgoHome.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\"\nimport AlgoSearchHome from \"./Search/AlgoSearchHome\";\n\naxios.defaults.withCredentials=true\n\n//This is main component for algorithm related components, controlling user input components so as to collect necessaary info\n\nclass AlgoHome extends React.Component{\n\n\n    //what does the stops state do? Backup I guess\n    state={mid:null,data:null,bad:null,outline:null,stops:0,mode:'eq',missing:false}\n\n    //When user submits endpoints, it sends a request to REST api to ensure submitted cities are real places\n\n    //valpairs refers to query string (ex. city1_country1_city2_country2) created in algo search home, however it is submitted here to have data centralized in main component\n    setValues=async(stops,valPairs)=>{\n        console.log('submitted')\n        console.log(valPairs)\n        const req=await axios.get(`https://mitinerary-js.herokuapp.com/home/${valPairs}/confirm`, {withCredentials:true})\n        console.log(req)\n        //If it runs correctly, it sends back an array of objects. If error, it sends back city that produced error as string\n        if(typeof req.data===\"string\"||typeof req.data[0]===\"string\"){\n            console.log(\"bad\",req)\n            //uses location of error to determine which city produced error\n            this.setState({bad:req.data[0]?req.data[0]:req.data})\n            return\n        }else{\n            const data=req.data\n            console.log(typeof data)\n            //need error handling here\n            //some redundancy with start/stop & data, but trouble otherwise\n            this.setState({stops:parseInt(stops),data:data[0],distance:data[1],bad:null, outline:null})\n        }\n    }\n\n    //mode refers to option to generate cities according to distance or according to size\n    setMode=(mode)=>{\n        this.setState({mode:mode})\n    }\n    //sends go ahead to run algo on backend. Backend has copy of trip which it uses, so dont have to send\n    launchAlgo=async()=>{\n        const trip=await axios.get(`https://mitinerary-js.herokuapp.com/home/${this.state.mode}/algoPlan`,{withCredentials: true})\n        console.log(\"this heres the trip\",trip.data[0])\n        this.props.receiveTrip(trip.data)\n        return\n    }\n\n    //Users can predetermine as many stops as they wish, up to the whole trip\n    //This function takes those added stops and inserts them between existing stops\n    extraStops=async(arr)=>{\n        console.log('extrastops called', arr)\n        let qs=\"\"\n        for(let m of arr){\n            qs+=('_'+m.index)\n        }\n        console.log(qs)\n        if(!qs){\n            qs+=\"_\"\n        }\n        //Rearranges stops in the event user changed their order. Informs backend of order on front end\n        const ordered=await axios.get(`https://mitinerary-js.herokuapp.com/home/${qs}/order`,{withCredentials: true})\n        //have to plan first implement as function rather than req \n        console.log(\"ordered\",ordered)\n        //Tells back end to create a doubly linked list, each node containing info on how far until next pre-determined stop, and how many stops it will make before then\n        const trip=await axios.get(`https://mitinerary-js.herokuapp.com/home/plan`,{withCredentials: true})\n\n        /*BASIC OUTLINE OF PLAN:\n            checks distance from starting city to each added city\n            orders based on distance\n            once list is calculated, compares total stops to stops used, assigns midpoints accordingly*/\n\n        //Resets the mid arr to reflect updated order, outline serves as sketch of stops so far\n        this.setState({mid:arr,outline:trip})\n\n        //!!!!: The qs wont be the cities themselves, but rather relative order based on order added\n        //Also keeps track of any that were removed\n\n    }\n\n    //Going back reinitializes component\n    clearState=()=>{\n        this.setState({mid:null,data:null,distance:null,bad:null})\n    }\n    render(){\n        return(\n            <div>\n                <AlgoSearchHome launch={this.launchAlgo} mode={this.state.mode} setMode={this.setMode} outline={this.state.outline} data={this.state.data} distance={this.state.distance} setValues={this.setValues} clearState={this.clearState} extraStops={this.extraStops} bad={this.state.bad}/>\n            </div>\n        )\n    }\n}\nexport default AlgoHome"],"mappings":"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"},"metadata":{},"sourceType":"module"}